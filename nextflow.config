/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    uphl-biongs/walkercreek Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

   // Input options
    input                         = null
    add_sra_file                  = null
    platform                      = null
    fasta                         = 'https://ftp.ncbi.nih.gov/genomes/INFLUENZA/influenza.fna.gz'

   // Reference data
    irma_flu_reference            = "${projectDir}/ref/irma_flu.fasta"
    irma_flu_index                = "${projectDir}/ref/irma_flu.fasta.fai"
    irma_flu_gff                  = "${projectDir}/ref/irma_flu.gff"
    genome                        = null
    igenomes_base                 = 's3://ngi-igenomes/igenomes'
    igenomes_ignore               = false
    h1n1_freyja_ref_url           = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/H1N1/latest/reference.fasta'
    h1n1_freyja_barcodes_url      = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/H1N1/latest/barcode.csv'
    h1n1_freyja_barcode_html_url  = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/H1N1/latest/barcode.html'
    h1n1_freyja_auspice_tree_url  = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/H1N1/latest/auspice_tree.json'
    h3n2_freyja_ref_url           = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/H3N2/latest/reference.fasta'
    h3n2_freyja_barcodes_url      = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/H3N2/latest/barcode.csv'
    h3n2_freyja_barcode_html_url  = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/H3N2/latest/barcode.html'
    h3n2_freyja_auspice_tree_url  = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/H3N2/latest/auspice_tree.json'
    h5nx_freyja_ref_url           = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/H5Nx/latest/reference.fasta'
    h5nx_freyja_barcodes_url      = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/H5Nx/latest/barcode.csv'
    h5nx_freyja_barcode_html_url  = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/H5Nx/latest/barcode.html'
    h5nx_freyja_auspice_tree_url  = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/H5Nx/latest/auspice_tree.json'
    b_vic_freyja_ref_url          = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/FLU-B-VIC/latest/reference.fasta'
    b_vic_freyja_barcodes_url     = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/FLU-B-VIC/latest/barcode.csv'
    b_vic_freyja_barcode_html_url = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/FLU-B-VIC/latest/barcode.html'
    b_vic_freyja_auspice_tree_url = 'https://raw.githubusercontent.com/andersen-lab/Freyja-barcodes/main/FLU-B-VIC/latest/auspice_tree.json'
    h1n1_freyja_ref               = "${projectDir}/ref/h1n1_reference.fasta"
    h1n1_freyja_barcodes          = "${projectDir}/ref/h1n1_barcode.csv"
    h1n1_freyja_barcode_html      = "${projectDir}/ref/h1n1_barcode.html"
    h1n1_freyja_auspice_tree      = "${projectDir}/ref/h1n1_auspice_tree.json"
    h3n2_freyja_ref               = "${projectDir}/ref/h3n2_reference.fasta"
    h3n2_freyja_barcodes          = "${projectDir}/ref/h3n2_barcode.csv"
    h3n2_freyja_barcode_html      = "${projectDir}/ref/h3n2_barcode.html"
    h3n2_freyja_auspice_tree      = "${projectDir}/ref/h3n2_auspice_tree.json"
    h5nx_freyja_ref               = "${projectDir}/ref/h5nx_reference.fasta"
    h5nx_freyja_barcodes          = "${projectDir}/ref/h5nx_barcode.csv"
    h5nx_freyja_barcode_html      = "${projectDir}/ref/h5nx_barcode.html"
    h5nx_freyja_auspice_tree      = "${projectDir}/ref/h5nx_auspice_tree.json"
    b_vic_freyja_ref              = "${projectDir}/ref/b_vic_reference.fasta"
    b_vic_freyja_barcodes         = "${projectDir}/ref/b_vic_barcode.csv"
    b_vic_freyja_barcode_html     = "${projectDir}/ref/b_vic_barcode.html"
    b_vic_freyja_auspice_tree     = "${projectDir}/ref/b_vic_auspice_tree.json"

   // MultiQC options
    multiqc_config               = null
    multiqc_title                = null
    multiqc_logo                 = null
    max_multiqc_email_size       = '25.MB'
    multiqc_methods_description  = null

   // Boilerplate options
    outdir                       = './results'
    tracedir                     = "${params.outdir}/pipeline_info"
    publish_dir_mode             = 'copy'
    email                        = null
    email_on_fail                = null
    plaintext_email              = false
    monochrome_logs              = false
    hook_url                     = null
    help                         = false
    version                      = false
    validate_params              = true
    show_hidden_params           = false
    schema_ignore_params         = "genomes"
    enable_conda                 = false

   // FastQC options
    adapter_fasta                = "${projectDir}/assets/adapter.fasta"
    save_trimmed_fail            = false
    save_merged                  = false
    trim_len                     = 50
    skip_fastqc                  = false

   // Config options
    custom_config_version        = 'master'
    custom_config_base           = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description   = null
    config_profile_contact       = null
    config_profile_url           = null
    config_profile_name          = null

   // Max resource options
   // Defaults only, expecting to be overwritten
    max_memory                   = '128.GB'
    max_cpus                     = 16
    max_time                     = '240.h'

   // walkercreek options
    save_debug                    = false
    irma_module                   = ''
    genome_length                 = 13500
    keep_ref_deletions            = true
    skip_ncbi_sra_human_scrubber  = false
    skip_vadr                     = true
    skip_kraken2                  = false
    skip_nextclade                = false
    skip_snpeff                   = false
    adapters_fasta                = 'https://raw.githubusercontent.com/BioInfoTools/BBMap/master/resources/adapters.fa'
    project_db_dir                = "${projectDir}/data"
    project_db_dir_ww             = "${projectDir}/data_ww"
    phix_fasta                    = 'https://github.com/BioInfoTools/BBMap/raw/master/resources/phix174_ill.ref.fa.gz'
    kraken_db_dir                 = "${projectDir}/data/kraken_db"
    flukraken_db_dir              = "${projectDir}/data_ww/flukraken2"
    flukrakendb_file              = "${projectDir}/ref/flukraken2.tar.gz"
    krakendb                      = 'https://genome-idx.s3.amazonaws.com/kraken/k2_standard_08gb_20230314.tar.gz'
    flukrakendb                   = 'https://github.com/jhuapl-bio/mytax/raw/refs/heads/master/databases/flukraken2.tar.gz'
    nextclade_dataset             = null
    cacheDir                      = '.nextflow/cache'
    min_sample_reads              = 100
    longread_adaptertrimming_tool = "porechop_abi"
    skip_adapter_trimming         = false
    save_porechop_reads           = false
    save_filtlong_reads           = false
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load uphl-biongs/walkercreek custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/walkercreek.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/walkercreek profiles: ${params.custom_config_base}/pipeline/walkercreek.config")
// }

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'UPHL-BioNGS/walkercreek'
    author          = """Tom Iverson"""
    homePage        = 'https://github.com/UPHL-BioNGS/walkercreek'
    description     = """A nextflow pipeline for influenza genomic analysis"""
    mainScript      = 'main.nf'
    defaultBranch   = 'master'
    nextflowVersion = '!>=22.10.1'
    version         = '3.0.0'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
